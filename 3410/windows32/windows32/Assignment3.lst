Microsoft (R) Macro Assembler Version 14.31.31107.0	    04/28/22 22:10:33
E:\Downloads\Assignment3.asm				     Page 1 - 1


				; Takes a user input and checks to see if that number is in the array.
				; Author:  Gabriel Snider
				; Date:    4/27/22

				.586
				.MODEL FLAT
				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK 4096

 00000000			.DATA
 00000000 00000000		number1 DWORD   ?
 00000004 00000014		numberArr  DWORD 20, 15, 62, 40, 18
	   0000000F
	   0000003E
	   00000028
	   00000012
 00000018 00000005		numOfEle   DWORD 5
 0000001C 45 6E 74 65 72	prompt1 BYTE    "Enter the number you wish to find in the array.", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 79 6F 75
	   20 77 69 73 68
	   20 74 6F 20 66
	   69 6E 64 20 69
	   6E 20 74 68 65
	   20 61 72 72 61
	   79 2E 00
 0000004C  00000014 [		string  BYTE    20 DUP (?)
	    00
	   ]

 00000060 30 20 46 6F 72	resultLbl BYTE  "0 For Not in Array, Other Numbers are Index where input is found."
	   20 4E 6F 74 20
	   69 6E 20 41 72
	   72 61 79 2C 20
	   4F 74 68 65 72
	   20 4E 75 6D 62
	   65 72 73 20 61
	   72 65 20 49 6E
	   64 65 78 20 77
	   68 65 72 65 20
	   69 6E 70 75 74
	   20 69 73 20 66
	   6F 75 6E 64 2E
 000000A1  0000000B [		result     BYTE  11 DUP (?), 0
	    00
	   ] 00


 00000000			.CODE
 00000000			_MainProc PROC
				        input   prompt1, string, 20      ; read ASCII characters
				        atod    string          ; convert to integer
 0000002D  A3 00000000 R	        mov     number1, eax    ; store input in eax
 00000032  8D 35 00000004 R	        lea     esi, numberArr  ; load array address
				        
 00000038  FF 35 00000000 R	        push number1
 0000003E  FF 35 00000018 R	        push numOfEle
 00000044  56			        push esi
				   
				        
 00000045  E8 0000003A		        call    searchFn        ; searchFn(number1, numberArr, numOfEle)
 0000004A  83 C4 0C		        add     esp, 12         ; remove parameters from stack
				        
				        dtoa    result, edi
				        output  resultLbl, result


				        
 0000007E  B8 00000000		        mov     eax, 0  ; exit with return code 0
 00000083  C3			        ret
 00000084			_MainProc ENDP


 00000084			searchFn   PROC
 00000084  55			        push    ebp             ; save base pointer
 00000085  8B EC		        mov     ebp, esp        ; establish stack frame
 00000087  53			        push    ebx             ; save EBX
 00000088  52			        push    edx             ; 4th parameter
 00000089  51			        push    ecx             ; 3rd parameter
 0000008A  56			        push    esi             ; 2nd parameter
 0000008B  50			        push    eax             ; 1st parameter
				        
				        
 0000008C  8B 75 08		        mov     esi, [ebp+8]    ; Array
 0000008F  8B 55 0C		        mov     edx, [ebp+12]   ; numOfEle
 00000092  8B 4D 10		        mov     ecx, [ebp+16]   ; User Input
 00000095  BB 00000000		        mov     ebx, 0

 0000009A			checkElement: 
 0000009A  8B 3E		        mov     edi, [esi]      ; Array Value
 0000009C  3B F8		        cmp     edi, eax        ; Compares the array element to the user input.
 0000009E  74 0A		        je      numFound        ; Jumps if the result is not found at that index.
 000000A0  43			        inc     ebx             ; Increaments our counter register
 000000A1  83 C6 04		        add     esi, 4          ; Reaches next array element
 000000A4  3B DA		        cmp     ebx, edx        ; Compares the number of elements to the count.
 000000A6  77 07		        ja      notArrayEle     ; Jumps to notArrayEle if the counter is more than the amount of elements in array.

 000000A8  E2 F0		        loop    checkElement    ; Loops checkElement if the count is lower or equal to the amount of elements in the array.




 000000AA			numFound: 
 000000AA  43			        inc     ebx             ; Increaments the counter for the array elements.
 000000AB  8B FB		        mov     edi, ebx        ; Moves the counter amount to edi.
 000000AD  EB 0C		        jmp     endSearch       ; Jumps to endSearch since the number has been found.
				        
 000000AF  B8 00000000		notArrayEle: mov  eax, 0        ; Outputs that the number is not in the array.
 000000B4  BF 00000000		        mov     edi, 0          ; Sets the counter to 0 for the output statement in main.
 000000B9  EB 00		        jmp     endSearch       ; Jumps to endSearch because the input is not a element in the array.
				    

 000000BB			endSearch:
 000000BB  58			        pop     eax             ; restore EAX
 000000BC  5E			        pop     esi             ; restore ESI
 000000BD  59			        pop     ecx             ; restore ECX
 000000BE  5A			        pop     edx             ; restore EDX
 000000BF  5B			        pop     ebx             ; restore EBX
 000000C0  5D			        pop     ebp             ; restore EBP
 000000C1  C3			        ret                     ; return      
 000000C2			searchFn   ENDP

				END

Microsoft (R) Macro Assembler Version 14.31.31107.0	    04/28/22 22:10:33
E:\Downloads\Assignment3.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000AD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000C2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public
searchFn . . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 0000003E Public
  checkElement . . . . . . . . .	L Near	 0000009A _TEXT	
  numFound . . . . . . . . . . .	L Near	 000000AA _TEXT	
  notArrayEle  . . . . . . . . .	L Near	 000000AF _TEXT	
  endSearch  . . . . . . . . . .	L Near	 000000BB _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
numOfEle . . . . . . . . . . . .	DWord	 00000018 _DATA	
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
numberArr  . . . . . . . . . . .	DWord	 00000004 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 0000001C _DATA	
resultLbl  . . . . . . . . . . .	Byte	 00000060 _DATA	
result . . . . . . . . . . . . .	Byte	 000000A1 _DATA	
string . . . . . . . . . . . . .	Byte	 0000004C _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
